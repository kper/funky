type MemoryAddress = u32;
#[derive(Debug, PartialEq, Eq)]
pub enum ValueType {
    I32,
    I64,
    F32,
    F64,
}
pub type BlockType = Option<ValueType>;
pub type LabelIdx = u32;
pub type FuncIdx = u32;
pub type TypeIdx = u32;

#[derive(Debug, PartialEq)]
pub enum Instruction {
    Unreachable,
    Nop,
    Block(BlockType),
    Loop(BlockType),
    If(BlockType),
    Else,
    Br(LabelIdx),
    BrIf(LabelIdx),
    BrTable, // TODO: Find kind for this instruction
    Return,
    Call(FuncIdx),
    CallIndirect(TypeIdx),
    End,

    // Memory
    I32Load(MemoryAddress),
    I64Load(MemoryAddress),
    F32Load(MemoryAddress),
    F64Load(MemoryAddress),
    I32Load8S(MemoryAddress),
    I32Load8U(MemoryAddress),
    I32Load16S(MemoryAddress),
    I32Load16U(MemoryAddress),
    I64Load8S(MemoryAddress),
    I64Load8U(MemoryAddress),
    I64Load16S(MemoryAddress),
    I64Load16U(MemoryAddress),
    I64Load32S(MemoryAddress),
    I64Load32U(MemoryAddress),
    I32Store(MemoryAddress),
    I64Store(MemoryAddress),
    F32Store(MemoryAddress),
    F64Store(MemoryAddress),
    I32Store8(MemoryAddress),
    I32Store16(MemoryAddress),
    I64Store8(MemoryAddress),
    I64Store16(MemoryAddress),
    I64Store32(MemoryAddress),
    MemorySize,
    MemoryGrow,

    // Numeric
    I32Const(i32),
    I64Const(i64),
    F32Const(f32),
    F64Const(f64),

    I32Eqz,
    I32Eq,
    I32Ne,
    I32LtS,
    I32LtU,
    I32GtS,
    I32GtU,
    I32LeS,
    I32LeU,
    I32GeS,
    I32GeU,

    F32Eq,
    F32Ne,
    F32Lt,
    F32Gt,
    F32Le,
    F32Ge,

    F64Eq,
    F64Ne,
    F64Lt,
    F64Gt,
    F64Le,
    F64Ge,

    I32Clz,
    I32Ctz,
    I32Popcnt,
    I32Add,
    I32Sub,
    I32Mul,
    I32DivS,
    I32DivU,
    I32RemS,
    I32RemU,
    I32And,
    I32Or,
    I32Xor,
    I32Shl,
    I32ShrS,
    I32ShrU,
    I32RotL,
    I32RotR,

    I64Clz,
    I64Ctz,
    I64Popcnt,
    I64Add,
    I64Sub,
    I64Mul,
    I64DivS,
    I64DivU,
    I64RemS,
    I64RemU,
    I64And,
    I64Or,
    I64Xor,
    I64Shl,
    I64ShrS,
    I64ShrU,
    I64RotL,
    I64RotR,

    F32Abs,
    F32Neg,
    F32Ceil,
    F32Floor,
    F32Trunc,
    F32Nearest,
    F32Sqrt,
    F32Add,
    F32Sub,
    F32Mul,
    F32Div,
    F32Min,
    F32Max,
    F32CopySign,

    F64Abs,
    F64Neg,
    F64Ceil,
    F64Floor,
    F64Trunc,
    F64Nearest,
    F64Sqrt,
    F64Add,
    F64Sub,
    F64Mul,
    F64Div,
    F64Min,
    F64Max,
    F64CopySign,

    I32WrapI64,
    I32TruncF32S,
    I32TruncF32U,
    I32TruncF64S,
    I32TruncF64U,

    I64ExtendI32S,
    I64ExtendI32U,
    I64TruncF32S,
    I64TruncF32U,
    I64TruncF64S,
    I64TruncF64U,

    F32ConvertI32S,
    F32ConvertI32U,
    F32ConvertI64S,
    F32ConvertI64U,
    F32DemoteF64,

    F64ConvertI32S,
    F64ConvertI32U,
    F64ConvertI64S,
    F64ConvertI64U,
    F64PromoteF32,

    I32ReinterpretF32,
    I64ReinterpretF64,
    F32ReinterpretI32,
    F64ReinterpretI64,
}
