   Compiling funky v0.1.0 (/home/kper/rust/funky)
warning: unused variable: `exported`
   --> src/engine.rs:497:13
    |
497 |         let exported = match k {
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_exported`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `arity`
   --> src/engine.rs:833:29
    |
833 |                         let arity = self.get_block_ty_arity(&ty)?;
    |                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_arity`

warning: unused variable: `l`
   --> src/engine.rs:990:17
    |
990 |             for l in 0..labels_len {
    |                 ^ help: if this is intentional, prefix it with an underscore: `_l`

warning: unused variable: `v`
    --> src/engine.rs:1067:34
     |
1067 |             BlockType::ValueType(v) => 1,
     |                                  ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `v`
    --> src/engine.rs:1085:34
     |
1085 |             BlockType::ValueType(v) => (1, vec![self.store.stack.pop()]),
     |                                  ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: method is never used: `get_block_params`
    --> src/engine.rs:1079:5
     |
1079 | /     fn get_block_params(
1080 | |         &mut self,
1081 | |         block_ty: &BlockType,
1082 | |     ) -> Result<(usize, Vec<Value>), InstructionOutcome> {
...    |
1124 | |         ))
1125 | |     }
     | |_____^
     |
     = note: `#[warn(dead_code)]` on by default

warning: 6 warnings emitted

warning: unused import: `funky::engine::Value::*`
  --> src/main.rs:11:5
   |
11 | use funky::engine::Value::*;
   |     ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: 1 warning emitted

    Finished dev [unoptimized + debuginfo] target(s) in 6.62s
     Running `target/debug/funky tests/call.wasm`
[2020-05-05T07:48:53Z INFO  funky] Parsing wasm file
[2020-05-05T07:48:53Z DEBUG wasm_parser] START [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 3, 2, 0, 0, 7, 18, 1, 14, 103, 101, 116, 65, 110, 115, 119, 101, 114, 80, 108, 117, 115, 49, 0, 1, 10, 14, 2, 4, 0, 65, 42, 11, 7, 0, 16, 0, 65, 1, 106, 11]
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_until_magic_number
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_version_number
[2020-05-05T07:48:53Z DEBUG wasm_parser] parse_section [1, 5, 1, 96, 0, 1, 127, 3, 3, 2, 0, 0, 7, 18, 1, 14, 103, 101, 116, 65, 110, 115, 119, 101, 114, 80, 108, 117, 115, 49, 0, 1, 10, 14, 2, 4, 0, 65, 42, 11, 7, 0, 16, 0, 65, 1, 106, 11]
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] SECTION [1] 5
[2020-05-05T07:48:53Z DEBUG wasm_parser] [1, 60, 0, 1, 7f, 3, 3, 2, 0, 0, 7, 12, 1, e, 67, 65, 74, 41, 6e, 73, 77, 65, 72, 50, 6c, 75, 73, 31, 0, 1, a, e, 2, 4, 0, 41, 2a, b, 7, 0, 10, 0, 41, 1, 6a, b]
[2020-05-05T07:48:53Z DEBUG wasm_parser] parse type section
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_function_signature
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser::core] convert value type 7F
[2020-05-05T07:48:53Z DEBUG wasm_parser] parse_section [3, 3, 2, 0, 0, 7, 18, 1, 14, 103, 101, 116, 65, 110, 115, 119, 101, 114, 80, 108, 117, 115, 49, 0, 1, 10, 14, 2, 4, 0, 65, 42, 11, 7, 0, 16, 0, 65, 1, 106, 11]
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] SECTION [3] 3
[2020-05-05T07:48:53Z DEBUG wasm_parser] [2, 0, 0, 7, 12, 1, e, 67, 65, 74, 41, 6e, 73, 77, 65, 72, 50, 6c, 75, 73, 31, 0, 1, a, e, 2, 4, 0, 41, 2a, b, 7, 0, 10, 0, 41, 1, 6a, b]
[2020-05-05T07:48:53Z DEBUG wasm_parser] parse function section
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] parse_section [7, 18, 1, 14, 103, 101, 116, 65, 110, 115, 119, 101, 114, 80, 108, 117, 115, 49, 0, 1, 10, 14, 2, 4, 0, 65, 42, 11, 7, 0, 16, 0, 65, 1, 106, 11]
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] SECTION [7] 18
[2020-05-05T07:48:53Z DEBUG wasm_parser] [1, e, 67, 65, 74, 41, 6e, 73, 77, 65, 72, 50, 6c, 75, 73, 31, 0, 1, a, e, 2, 4, 0, 41, 2a, b, 7, 0, 10, 0, 41, 1, 6a, b]
[2020-05-05T07:48:53Z DEBUG wasm_parser] parse export function
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_export
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_name
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_desc
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] parse_section [10, 14, 2, 4, 0, 65, 42, 11, 7, 0, 16, 0, 65, 1, 106, 11]
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] SECTION [10] 14
[2020-05-05T07:48:53Z DEBUG wasm_parser] [2, 4, 0, 41, 2a, b, 7, 0, 10, 0, 41, 1, 6a, b]
[2020-05-05T07:48:53Z DEBUG wasm_parser] parse_code_section
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] parse_code
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_func
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] locals []
[2020-05-05T07:48:53Z DEBUG wasm_parser] take expr
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] parse_instr
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] ---------------
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] HEAD [41]
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] i [2a, b, 7, 0, 10, 0, 41, 1, 6a, b]
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_i32
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] instr Num(OP_I32_CONST(42))
[2020-05-05T07:48:53Z DEBUG wasm_parser] instructions [
        Num(
            OP_I32_CONST(
                42,
            ),
        ),
    ]
[2020-05-05T07:48:53Z DEBUG wasm_parser] parse_code
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_func
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] locals []
[2020-05-05T07:48:53Z DEBUG wasm_parser] take expr
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] parse_instr
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] ---------------
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] HEAD [10]
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] i [0, 41, 1, 6a, b]
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] instr Ctrl(OP_CALL(0))
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] parse_instr
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] ---------------
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] HEAD [41]
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] i [1, 6a, b]
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_i32
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] instr Num(OP_I32_CONST(1))
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] parse_instr
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] ---------------
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] HEAD [6a]
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] i [b]
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] instr Num(OP_I32_ADD)
[2020-05-05T07:48:53Z DEBUG wasm_parser] instructions [
        Ctrl(
            OP_CALL(
                0,
            ),
        ),
        Num(
            OP_I32_CONST(
                1,
            ),
        ),
        Num(
            OP_I32_ADD,
        ),
    ]
[2020-05-05T07:48:53Z DEBUG wasm_parser] parse_section []
[2020-05-05T07:48:53Z DEBUG wasm_parser] (
        [],
        [
            Type(
                TypeSection {
                    entries: [
                        FunctionSignature {
                            param_types: [],
                            return_types: [
                                I32,
                            ],
                        },
                    ],
                },
            ),
            Function(
                FunctionSection {
                    types: [
                        0,
                        0,
                    ],
                },
            ),
            Export(
                ExportSection {
                    entries: [
                        ExportEntry {
                            name: "getAnswerPlus1",
                            kind: Function {
                                ty: 1,
                            },
                        },
                    ],
                },
            ),
            Code(
                CodeSection {
                    entries: [
                        FunctionBody {
                            locals: [],
                            code: [
                                Num(
                                    OP_I32_CONST(
                                        42,
                                    ),
                                ),
                            ],
                        },
                        FunctionBody {
                            locals: [],
                            code: [
                                Ctrl(
                                    OP_CALL(
                                        0,
                                    ),
                                ),
                                Num(
                                    OP_I32_CONST(
                                        1,
                                    ),
                                ),
                                Num(
                                    OP_I32_ADD,
                                ),
                            ],
                        },
                    ],
                },
            ),
        ],
    )
[2020-05-05T07:48:53Z DEBUG wasm_parser] START [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 3, 2, 0, 0, 7, 18, 1, 14, 103, 101, 116, 65, 110, 115, 119, 101, 114, 80, 108, 117, 115, 49, 0, 1, 10, 14, 2, 4, 0, 65, 42, 11, 7, 0, 16, 0, 65, 1, 106, 11]
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_until_magic_number
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_version_number
[2020-05-05T07:48:53Z DEBUG wasm_parser] parse_section [1, 5, 1, 96, 0, 1, 127, 3, 3, 2, 0, 0, 7, 18, 1, 14, 103, 101, 116, 65, 110, 115, 119, 101, 114, 80, 108, 117, 115, 49, 0, 1, 10, 14, 2, 4, 0, 65, 42, 11, 7, 0, 16, 0, 65, 1, 106, 11]
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] SECTION [1] 5
[2020-05-05T07:48:53Z DEBUG wasm_parser] [1, 60, 0, 1, 7f, 3, 3, 2, 0, 0, 7, 12, 1, e, 67, 65, 74, 41, 6e, 73, 77, 65, 72, 50, 6c, 75, 73, 31, 0, 1, a, e, 2, 4, 0, 41, 2a, b, 7, 0, 10, 0, 41, 1, 6a, b]
[2020-05-05T07:48:53Z DEBUG wasm_parser] parse type section
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_function_signature
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser::core] convert value type 7F
[2020-05-05T07:48:53Z DEBUG wasm_parser] parse_section [3, 3, 2, 0, 0, 7, 18, 1, 14, 103, 101, 116, 65, 110, 115, 119, 101, 114, 80, 108, 117, 115, 49, 0, 1, 10, 14, 2, 4, 0, 65, 42, 11, 7, 0, 16, 0, 65, 1, 106, 11]
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] SECTION [3] 3
[2020-05-05T07:48:53Z DEBUG wasm_parser] [2, 0, 0, 7, 12, 1, e, 67, 65, 74, 41, 6e, 73, 77, 65, 72, 50, 6c, 75, 73, 31, 0, 1, a, e, 2, 4, 0, 41, 2a, b, 7, 0, 10, 0, 41, 1, 6a, b]
[2020-05-05T07:48:53Z DEBUG wasm_parser] parse function section
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] parse_section [7, 18, 1, 14, 103, 101, 116, 65, 110, 115, 119, 101, 114, 80, 108, 117, 115, 49, 0, 1, 10, 14, 2, 4, 0, 65, 42, 11, 7, 0, 16, 0, 65, 1, 106, 11]
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] SECTION [7] 18
[2020-05-05T07:48:53Z DEBUG wasm_parser] [1, e, 67, 65, 74, 41, 6e, 73, 77, 65, 72, 50, 6c, 75, 73, 31, 0, 1, a, e, 2, 4, 0, 41, 2a, b, 7, 0, 10, 0, 41, 1, 6a, b]
[2020-05-05T07:48:53Z DEBUG wasm_parser] parse export function
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_export
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_name
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_desc
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] parse_section [10, 14, 2, 4, 0, 65, 42, 11, 7, 0, 16, 0, 65, 1, 106, 11]
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] SECTION [10] 14
[2020-05-05T07:48:53Z DEBUG wasm_parser] [2, 4, 0, 41, 2a, b, 7, 0, 10, 0, 41, 1, 6a, b]
[2020-05-05T07:48:53Z DEBUG wasm_parser] parse_code_section
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] parse_code
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_func
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] locals []
[2020-05-05T07:48:53Z DEBUG wasm_parser] take expr
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] parse_instr
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] ---------------
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] HEAD [41]
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] i [2a, b, 7, 0, 10, 0, 41, 1, 6a, b]
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_i32
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] instr Num(OP_I32_CONST(42))
[2020-05-05T07:48:53Z DEBUG wasm_parser] instructions [
        Num(
            OP_I32_CONST(
                42,
            ),
        ),
    ]
[2020-05-05T07:48:53Z DEBUG wasm_parser] parse_code
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_func
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser] locals []
[2020-05-05T07:48:53Z DEBUG wasm_parser] take expr
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] parse_instr
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] ---------------
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] HEAD [10]
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] i [0, 41, 1, 6a, b]
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_u32
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] instr Ctrl(OP_CALL(0))
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] parse_instr
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] ---------------
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] HEAD [41]
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] i [1, 6a, b]
[2020-05-05T07:48:53Z DEBUG wasm_parser] take_leb_i32
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] instr Num(OP_I32_CONST(1))
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] parse_instr
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] ---------------
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] HEAD [6a]
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] i [b]
[2020-05-05T07:48:53Z DEBUG wasm_parser::instructions] instr Num(OP_I32_ADD)
[2020-05-05T07:48:53Z DEBUG wasm_parser] instructions [
        Ctrl(
            OP_CALL(
                0,
            ),
        ),
        Num(
            OP_I32_CONST(
                1,
            ),
        ),
        Num(
            OP_I32_ADD,
        ),
    ]
[2020-05-05T07:48:53Z DEBUG wasm_parser] parse_section []
[2020-05-05T07:48:53Z DEBUG validation] Functypes are valid
[2020-05-05T07:48:53Z DEBUG validation] FunctionsTypes are valid
[2020-05-05T07:48:53Z DEBUG validation] TablesTypes are valid
[2020-05-05T07:48:53Z DEBUG validation] MemoryTypes are valid
[2020-05-05T07:48:53Z DEBUG validation] GlobalTypes are valid
[2020-05-05T07:48:53Z DEBUG validation] Elements are valid
[2020-05-05T07:48:53Z DEBUG validation] Data is valid
[2020-05-05T07:48:53Z DEBUG validation] Start is valid
[2020-05-05T07:48:53Z DEBUG validation] Imports are valid
[2020-05-05T07:48:53Z DEBUG validation] Checking export getAnswerPlus1
[2020-05-05T07:48:53Z DEBUG validation] Exports are valid
[2020-05-05T07:48:53Z DEBUG validation] Table size is ok
[2020-05-05T07:48:53Z DEBUG validation] Export names are unique
[2020-05-05T07:48:53Z INFO  funky] Constructing engine
[2020-05-05T07:48:53Z INFO  funky::engine] Allocation
[2020-05-05T07:48:53Z DEBUG funky::allocation] allocate
[2020-05-05T07:48:53Z DEBUG funky::allocation] allocate function
[2020-05-05T07:48:53Z DEBUG funky::allocation] module Module {
        sections: [
            Type(
                TypeSection {
                    entries: [
                        FunctionSignature {
                            param_types: [],
                            return_types: [
                                I32,
                            ],
                        },
                    ],
                },
            ),
            Function(
                FunctionSection {
                    types: [
                        0,
                        0,
                    ],
                },
            ),
            Export(
                ExportSection {
                    entries: [
                        ExportEntry {
                            name: "getAnswerPlus1",
                            kind: Function {
                                ty: 1,
                            },
                        },
                    ],
                },
            ),
            Code(
                CodeSection {
                    entries: [
                        FunctionBody {
                            locals: [],
                            code: [
                                Num(
                                    OP_I32_CONST(
                                        42,
                                    ),
                                ),
                            ],
                        },
                        FunctionBody {
                            locals: [],
                            code: [
                                Ctrl(
                                    OP_CALL(
                                        0,
                                    ),
                                ),
                                Num(
                                    OP_I32_CONST(
                                        1,
                                    ),
                                ),
                                Num(
                                    OP_I32_ADD,
                                ),
                            ],
                        },
                    ],
                },
            ),
        ],
    }
[2020-05-05T07:48:53Z DEBUG funky::allocation] functions extracted [
        0,
        0,
    ]
[2020-05-05T07:48:53Z DEBUG funky::allocation] Function 0
[2020-05-05T07:48:53Z DEBUG funky::allocation] Function 0
[2020-05-05T07:48:53Z DEBUG funky::allocation] Functions in store [
        FuncInstance {
            ty: FunctionSignature {
                param_types: [],
                return_types: [
                    I32,
                ],
            },
            module: (Weak),
            code: FunctionBody {
                locals: [],
                code: [
                    Num(
                        OP_I32_CONST(
                            42,
                        ),
                    ),
                ],
            },
        },
        FuncInstance {
            ty: FunctionSignature {
                param_types: [],
                return_types: [
                    I32,
                ],
            },
            module: (Weak),
            code: FunctionBody {
                locals: [],
                code: [
                    Ctrl(
                        OP_CALL(
                            0,
                        ),
                    ),
                    Num(
                        OP_I32_CONST(
                            1,
                        ),
                    ),
                    Num(
                        OP_I32_ADD,
                    ),
                ],
            },
        },
    ]
[2020-05-05T07:48:53Z DEBUG funky::allocation] allocate tables
[2020-05-05T07:48:53Z DEBUG funky::allocation] Tables in mod_i []
[2020-05-05T07:48:53Z DEBUG funky::allocation] Tables in store []
[2020-05-05T07:48:53Z DEBUG funky::allocation] allocate memories
[2020-05-05T07:48:53Z DEBUG funky::allocation] Memories in mod_i []
[2020-05-05T07:48:53Z DEBUG funky::allocation] Memories in store []
[2020-05-05T07:48:53Z DEBUG funky::allocation] allocate globals
[2020-05-05T07:48:53Z DEBUG funky::allocation] Globals in mod_i []
[2020-05-05T07:48:53Z DEBUG funky::allocation] Globals in store []
[2020-05-05T07:48:53Z DEBUG funky::allocation] allocate exports
[2020-05-05T07:48:53Z DEBUG funky::allocation] Export ExportEntry { name: "getAnswerPlus1", kind: Function { ty: 1 } }
[2020-05-05T07:48:53Z DEBUG funky::allocation] Exports in mod_i [ExportInstance { name: "getAnswerPlus1", value: Function { ty: 1 } }]
[2020-05-05T07:48:53Z DEBUG funky] engine Engine {
        module: RefCell {
            value: ModuleInstance {
                start: 0,
                code: [
                    FunctionBody {
                        locals: [],
                        code: [
                            Num(
                                OP_I32_CONST(
                                    42,
                                ),
                            ),
                        ],
                    },
                    FunctionBody {
                        locals: [],
                        code: [
                            Ctrl(
                                OP_CALL(
                                    0,
                                ),
                            ),
                            Num(
                                OP_I32_CONST(
                                    1,
                                ),
                            ),
                            Num(
                                OP_I32_ADD,
                            ),
                        ],
                    },
                ],
                fn_types: [
                    FunctionSignature {
                        param_types: [],
                        return_types: [
                            I32,
                        ],
                    },
                ],
                funcaddrs: [
                    0,
                    1,
                ],
                tableaddrs: [],
                memaddrs: [],
                globaladdrs: [],
                exports: [
                    ExportInstance {
                        name: "getAnswerPlus1",
                        value: Function {
                            ty: 1,
                        },
                    },
                ],
            },
        },
        started: false,
        store: Store {
            funcs: [
                FuncInstance {
                    ty: FunctionSignature {
                        param_types: [],
                        return_types: [
                            I32,
                        ],
                    },
                    module: (Weak),
                    code: FunctionBody {
                        locals: [],
                        code: [
                            Num(
                                OP_I32_CONST(
                                    42,
                                ),
                            ),
                        ],
                    },
                },
                FuncInstance {
                    ty: FunctionSignature {
                        param_types: [],
                        return_types: [
                            I32,
                        ],
                    },
                    module: (Weak),
                    code: FunctionBody {
                        locals: [],
                        code: [
                            Ctrl(
                                OP_CALL(
                                    0,
                                ),
                            ),
                            Num(
                                OP_I32_CONST(
                                    1,
                                ),
                            ),
                            Num(
                                OP_I32_ADD,
                            ),
                        ],
                    },
                },
            ],
            tables: [],
            memory: [],
            stack: [],
            globals: [],
        },
    }
[2020-05-05T07:48:53Z DEBUG funky] Instantiation engine
[2020-05-05T07:48:53Z INFO  funky::engine] Instantiation
[2020-05-05T07:48:53Z DEBUG funky::instantiation] instantiate elements
[2020-05-05T07:48:53Z DEBUG funky::instantiation] instantiate elements
[2020-05-05T07:48:53Z DEBUG funky::instantiation] instantiate start
[2020-05-05T07:48:53Z DEBUG funky::instantiation] No start section
[2020-05-05T07:48:53Z INFO  funky] Invoking function 1
[2020-05-05T07:48:53Z DEBUG funky::engine] Invoking function on Engine {
        module: RefCell {
            value: ModuleInstance {
                start: 0,
                code: [
                    FunctionBody {
                        locals: [],
                        code: [
                            Num(
                                OP_I32_CONST(
                                    42,
                                ),
                            ),
                        ],
                    },
                    FunctionBody {
                        locals: [],
                        code: [
                            Ctrl(
                                OP_CALL(
                                    0,
                                ),
                            ),
                            Num(
                                OP_I32_CONST(
                                    1,
                                ),
                            ),
                            Num(
                                OP_I32_ADD,
                            ),
                        ],
                    },
                ],
                fn_types: [
                    FunctionSignature {
                        param_types: [],
                        return_types: [
                            I32,
                        ],
                    },
                ],
                funcaddrs: [
                    0,
                    1,
                ],
                tableaddrs: [],
                memaddrs: [],
                globaladdrs: [],
                exports: [
                    ExportInstance {
                        name: "getAnswerPlus1",
                        value: Function {
                            ty: 1,
                        },
                    },
                ],
            },
        },
        started: false,
        store: Store {
            funcs: [
                FuncInstance {
                    ty: FunctionSignature {
                        param_types: [],
                        return_types: [
                            I32,
                        ],
                    },
                    module: (Weak),
                    code: FunctionBody {
                        locals: [],
                        code: [
                            Num(
                                OP_I32_CONST(
                                    42,
                                ),
                            ),
                        ],
                    },
                },
                FuncInstance {
                    ty: FunctionSignature {
                        param_types: [],
                        return_types: [
                            I32,
                        ],
                    },
                    module: (Weak),
                    code: FunctionBody {
                        locals: [],
                        code: [
                            Ctrl(
                                OP_CALL(
                                    0,
                                ),
                            ),
                            Num(
                                OP_I32_CONST(
                                    1,
                                ),
                            ),
                            Num(
                                OP_I32_ADD,
                            ),
                        ],
                    },
                },
            ],
            tables: [],
            memory: [],
            stack: [
                Frame(
                    Frame {
                        arity: 0,
                        locals: [],
                        module_instance: (Weak),
                    },
                ),
            ],
            globals: [],
        },
    }
[2020-05-05T07:48:53Z DEBUG funky::engine] Running function 1
[2020-05-05T07:48:53Z DEBUG funky::engine] stack [
        Frame(
            Frame {
                arity: 0,
                locals: [],
                module_instance: (Weak),
            },
        ),
    ]
[2020-05-05T07:48:53Z DEBUG funky::engine] frame Frame {
        arity: 0,
        locals: [],
        module_instance: (Weak),
    }
[2020-05-05T07:48:53Z DEBUG funky::engine] Evaluating instruction Ctrl(OP_CALL(0))
[2020-05-05T07:48:53Z DEBUG funky::engine] OP_CALL 0
[2020-05-05T07:48:53Z DEBUG funky::engine] Calling 0 with Frame {
        arity: 1,
        locals: [],
        module_instance: (Weak),
    }
[2020-05-05T07:48:53Z DEBUG funky::engine] Running function 0
[2020-05-05T07:48:53Z DEBUG funky::engine] stack [
        Frame(
            Frame {
                arity: 1,
                locals: [],
                module_instance: (Weak),
            },
        ),
    ]
[2020-05-05T07:48:53Z DEBUG funky::engine] frame Frame {
        arity: 1,
        locals: [],
        module_instance: (Weak),
    }
[2020-05-05T07:48:53Z DEBUG funky::engine] Evaluating instruction Num(OP_I32_CONST(42))
[2020-05-05T07:48:53Z DEBUG funky::engine] OP_I32_CONST: pushing 42 to stack
[2020-05-05T07:48:53Z DEBUG funky::engine] stack [
        Value(
            I32(
                42,
            ),
        ),
    ]
[2020-05-05T07:48:53Z DEBUG funky::engine] Implicit return (arity 1)
[2020-05-05T07:48:53Z DEBUG funky::engine] Popping Some(Value(I32(42)))
[2020-05-05T07:48:53Z DEBUG funky::engine] Popping frames
[2020-05-05T07:48:53Z DEBUG funky::engine] Stack after function return [
        Value(
            I32(
                42,
            ),
        ),
    ]
[2020-05-05T07:48:53Z DEBUG funky::engine] Evaluating instruction Num(OP_I32_CONST(1))
[2020-05-05T07:48:53Z DEBUG funky::engine] OP_I32_CONST: pushing 1 to stack
[2020-05-05T07:48:53Z DEBUG funky::engine] stack [
        Value(
            I32(
                42,
            ),
        ),
        Value(
            I32(
                1,
            ),
        ),
    ]
[2020-05-05T07:48:53Z DEBUG funky::engine] Evaluating instruction Num(OP_I32_ADD)
[2020-05-05T07:48:53Z DEBUG funky::engine] Implicit return (arity 0)
[2020-05-05T07:48:53Z DEBUG funky::engine] Popping frames
[2020-05-05T07:48:53Z DEBUG funky::engine] Stack after function return [
        Value(
            I32(
                43,
            ),
        ),
    ]
Last value on stack was: Some(Value(I32(43)))
